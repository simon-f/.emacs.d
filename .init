;;;; Simon's .emacs file
; Simon Fromme
; 14.11.2014

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;;; add directories to load path
; add directories in ~/.emacs.d/lisp/ recursively
(let ((default-directory "~/.emacs.d/lisp/"))
  (normal-top-level-add-subdirs-to-load-path))

(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path "~/.emacs.d/")

;;;; external package sources
 ;;;melpa
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(when (< emacs-major-version 24)
; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
(package-initialize) 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;;; custom user interface settings (including modes)
; disable tool- and menu-bar
(tool-bar-mode -1)
(menu-bar-mode -1)

;; make scrollbar a little slimmer
;(setq 'scroll-bar-width 10)
(add-to-list 'default-frame-alist (cons scroll-bar-width 10))

;; disable start message
(setq inhibit-startup-message t)

; enable solarized theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/emacs-color-theme-solarized/")
(load-theme 'solarized-light t)

; custom-set-faces
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(set-face-attribute 'default nil :height 110)

;; ido-mode
(require 'ido)
(ido-mode 1)

(add-to-list 'load-path "~/.emacs.d/lisp/smart-mode-line/") 
(require 'smart-mode-line)
(sml/setup)
(sml/apply-theme 'respectful)
(add-to-list 'sml/replacer-regexp-list '("^~/Studium/" ":Studium:") t)
(add-to-list 'sml/replacer-regexp-list '("^~/Documents/Bachelorarbeit/Arbeit/" ":BA:") t)


;;;; custom key binding that dont belong to specific mode
;

(global-set-key (kbd "C-x C-a") 'eval-buffer)
(global-set-key (kbd "M-i") 'back-to-indentation)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;;; costom modes
;
;

;;; Latex related modes
;; auctex
(setq TeX-PDF-mode 1)

;; reftex
(require 'reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode

;; cdlatex
(autoload 'cdlatex-mode "~/.emacs.d/lisp/cdlatex.el" "CDLaTeX Mode" 1) 
(autoload 'turn-on-cdlatex "~/.emacs.d/lisp/cdlatex.el" "CDLaTeX Mode" nil)
(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

;;; recent file mode
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;;; multitiple cursor mode
(require 'multiple-cursors)

;;; wrap-region mode
; minor mode that wraps a region with punctuations.
; default wrappers are: ", ', (, {, [.
(require 'wrap-region) 
(wrap-region-mode 1)
; add custom wrappers
(wrap-region-add-wrapper "$" "$")
(wrap-region-add-wrapper "{-" "-}" "#")
(wrap-region-add-wrapper "/" "/" nil 'ruby-mode)
(wrap-region-add-wrapper "/* " " */" "#" '(java-mode javascript-mode css-mode))
(wrap-region-add-wrapper "`" "`" nil '(markdown-mode ruby-mode))

;;; zencoding mode
; Unfold CSS-selector-like expressions to markup. Intended to be used
; with sgml-like languages; xml, html, xhtml, xsl, etc.
(require 'zencoding-mode)

;;; iy-go-to-char
; defines the function `iy-go-to-char' which behaves like "f" in
; vim, and `iy-go-up-to-char` like "t" in vim.  It reads a char and go the
; next Nth occurence of the char. User can continue such search using that
; char key.
(require 'iy-go-to-char)
; set global keys
(global-set-key (kbd "M-m") 'iy-go-to-char)
(global-set-key (kbd "C-M-m") 'iy-go-to-char-backward)

;;; key-chord mode
; enables the invocation of functions when two keys are pressed simultaneously
(require 'key-chord)
(key-chord-mode 1)
; emulates f in vim by pressing either fg or fd simultaneously
(key-chord-define-global "fg" 'iy-go-to-char)
(key-chord-define-global "fd" 'iy-go-to-char-backward)
(key-chord-define-global "gg" 'magit-status)
(key-chord-define-global "pp" 'magit-push)
; TODO: only make this available to certain modes (C++, ...)
(key-chord-define-global "rr" 'quickrun)

;;; ace-jump mode
; minor mode for Emacs. It can help you to move your cursor
; to ANY position in emacs by using only 3 times key press. 
(require 'ace-jump-mode)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;;; pending delete mode
(delete-selection-mode 1)

;;; company-mode (autocompletion)
(add-hook 'after-init-hook 'global-company-mode)

;;; gnuplot mode
(require 'gnuplot-mode)
; automatically open files ending with .gp or .gnuplot in gnuplot mode
(setq auto-mode-alist 
  (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))

;; rsense
(setq rsense-home (expand-file-name "~/.emacs.d/lisp/rsense-0.3"))
(add-to-list 'load-path (concat rsense-home "/etc"))
(require 'rsense)

;; autocomplete mode
(require 'auto-complete-config)
(ac-config-default)

;; ya-snipplet
(require 'yasnippet)
(setq yas/root-directory "~/.emacs.d/yasnippet-snippets")
(yas/load-directory yas/root-directory)
(yas-global-mode 1)
(global-set-key (kbd "C-h y") 'yas/describe-tables)

;;; org-mode
(add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-todo-keywords
      '((sequence "TODO" "STARTED" "WAITING" "PROJ" "APPT" "|" "DONE" "DELEGATED")))

;;; quickrun 
(require 'quickrun)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;;; custom functions

;;; insert date and time
(defvar current-date-time-format "%a %b %d %H:%M:%S %Z %Y"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

(defvar current-time-format "%a %H:%M:%S"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

(defun insert-current-date-time ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert "==========\n")
;       (insert (let () (comment-start)))
       (insert (format-time-string current-date-time-format (current-time)))
;       (insert "\n")
       )

(defun insert-current-time ()
  "insert the current time (1-week scope) into the current buffer."
       (interactive)
       (insert (format-time-string current-time-format (current-time)))
;       (insert "\n")
       )

; set shortcuts to insert date and time
(global-set-key "\C-c\d" 'insert-current-date-time)
(global-set-key "\C-c\j" 'insert-current-time)

;;; move-text
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg)
          (when (and (eval-when-compile
                       '(and (>= emacs-major-version 24)
                             (>= emacs-minor-version 3)))
                     (< arg 0))
            (forward-line -1)))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))


(global-set-key [M-S-up] 'move-text-up)
(global-set-key [M-S-down] 'move-text-down)

;; automatically ues ispell mode for Latex documents
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(global-set-key [C-<] 'ispell-complete-word)
(put 'upcase-region 'disabled nil)


; activate for multiple lines in a row
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
; activate for individual words
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;;; eval-and-replace
;
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(global-set-key (kbd "C-c e") 'eval-and-replace)
(put 'downcase-region 'disabled nil)

;;; copy-file-name-to-clipboard
;
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

 (global-set-key (kbd "C-c n") 'copy-file-name-to-clipboard)





(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-command "latex -shell-escape")
 '(TeX-command-list (quote (("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil (plain-tex-mode texinfo-mode ams-tex-mode) :help "Run plain TeX") ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX") ("Makeinfo" "makeinfo %t" TeX-run-compile nil (texinfo-mode) :help "Run Makeinfo with Info output") ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil (texinfo-mode) :help "Run Makeinfo with HTML output") ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil (ams-tex-mode) :help "Run AMSTeX") ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil (context-mode) :help "Run ConTeXt once") ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil (context-mode) :help "Run ConTeXt until completion") ("BibTeX" "bibtex %(tex-file-name)" TeX-run-BibTeX nil t :help "Run BibTeX") ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber") ("View" "okular %s.pdf" TeX-run-discard-or-function t t :help "Run Viewer") ("Print" "%p" TeX-run-command t t :help "Print the file") ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command) ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file") ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file") ("Check" "lacheck %s" TeX-run-compile nil (latex-mode) :help "Check LaTeX file for correctness") ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document") ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files") ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files") ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
 '(TeX-view-program-list (quote (("Okular" "okular"))))
 '(custom-safe-themes (quote ("d1f2da6cd8f215e7110e478e6b9fedeffcf2eb8bfaa2dec0a444782a32a969d3" "3a727bdc09a7a141e58925258b6e873c65ccf393b2240c51553098ca93957723" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" default)))
 '(delete-selection-mode nil)
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(mark-even-if-inactive t)
 '(nxml-slash-auto-complete-flag t)
 '(org-agenda-files (quote ("~/blitzschach.org" "~/Studium/Bachelorarbeit/org/Treffen-Betreuer.org" "~/Documents/Notizen/friends.org" "~/todo.org")))
 '(package-archives (quote (("marmalade" . "http://marmalade-repo.org/packages/") ("gnu" . "http://elpa.gnu.org/packages/"))))
 '(scroll-bar-mode (quote right))
 '(transient-mark-mode 1))



;; workaround fot dead circumflex...
(require 'iso-transl)
(define-key key-translation-map [dead-grave] "`")
(define-key key-translation-map [dead-acute] "'")
(define-key key-translation-map [dead-circumflex] "^")
(define-key key-translation-map [dead-diaeresis] "\"")
(define-key key-translation-map [dead-tilde] "~")
